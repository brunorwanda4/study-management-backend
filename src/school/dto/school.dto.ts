import { AddressSchema } from "src/user/dto/user.dto";
import { z } from "zod";

export const curriculumEnum = z.enum(["REB", "TVET"])
export type curriculumEnumDto = z.infer<typeof curriculumEnum>

export const SchoolMembers = z.enum(["Mixed", "Boys", "Girls"]);
export type SchoolMembersDto = z.infer<typeof SchoolMembers>

export const SchoolTypeEnum = z.enum([
  "Public",
  "Private",
  "Charter",
  "International",
]);
export type schoolTypeDto = z.infer<typeof SchoolTypeEnum>;

export const AttendanceSystemEnum = z.enum(["Manual", "Online"]);

export const AffiliationTypeEnum = z.enum([
  "Government", "Religious", "NGO", "independent"
])

export const ContactSchema = z.object({
  phone: z.string().min(1, "Phone is required"),
  email: z.string().email("Invalid email format"),
  whatsappNumber: z.string().optional(),
}).optional();

const SocialMediaSchema = z.object({
  platform: z.string().min(1, "Platform is required"),
  link: z.string().url("Must be a valid URL"),
});

export const CreateSchoolSchema = z.object({
  creatorId: z.string().min(1, "Creator ID is required"),
  username: z.string()
    .min(3, "Username must be at least 3 characters")
    .regex(/^[a-zA-Z0-9_]+$/, "Username can only contain letters, numbers, and underscores"),
  logo: z.string().url("Logo must be a valid URL").optional(),
  name: z.string().min(1, "Name is required"),
  description: z.string().optional(),
  schoolType: SchoolTypeEnum,
  curriculum: z.array(curriculumEnum).min(1, "At least one curriculum is required"),
  educationLevel: z.array(z.string()).min(1, "At least one education level is required"),
  schoolMembers: SchoolMembers.optional(),
  accreditationNumber: z.string().optional(),
  affiliation: AffiliationTypeEnum.optional(),

  address: AddressSchema,
  contact: ContactSchema,
  website: z.string().url("Website must be a valid URL").optional(),
  socialMedia: z.array(SocialMediaSchema).optional(),

  studentCapacity: z.number().int().positive("Capacity must be a positive number").optional(),
  uniformRequired: z.boolean().optional(),
  attendanceSystem: AttendanceSystemEnum.optional(),
  scholarshipAvailable: z.boolean().optional(),

  classrooms: z.number().int().positive("Classrooms must be a positive number").optional(),
  library: z.boolean().optional(),
  labs: z.array(z.string()).optional(),
  sportsExtracurricular: z.array(z.string()).optional(),
  onlineClasses: z.boolean().optional(),
}).superRefine((data, ctx) => {
  if (!data.username || !data.name) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "Username, and name are required",
    });
  }

  if (!data.website && (!data.socialMedia || data.socialMedia.length === 0)) {
    ctx.addIssue({
      code: z.ZodIssueCode.custom,
      message: "Either website or at least one social media link must be provided",
    });
  }
});

export type CreateSchoolDto = z.infer<typeof CreateSchoolSchema>;

export const SchoolSchema = z.object({
  // IDs are strings in Prisma's MongoDB adapter
  id: z.string(), // Usually generated by DB, but useful for validation if present
  creatorId: z.string(), //ObjectId represented as string
  assessmentTypes: z.array(z.string()).optional(),
  // basic information
  username: z.string().min(3, { message: "Username must be at least 3 characters" }), // Added min length validation
  logo: z.string().url({ message: "Invalid logo URL" }).optional(), // Validate as URL
  name: z.string().min(1, { message: "School name is required" }),
  code: z.string().min(1, { message: "School code is required" }),
  description: z.string().optional(),
  schoolType: SchoolTypeEnum,
  curriculum: z.array(z.string()).min(1, { message: "At least one curriculum must be specified" }), // Ensure array isn't empty
  educationLevel: z.array(z.string()).min(1, { message: "At least one education level must be specified" }), // Ensure array isn't empty
  schoolMembers: SchoolMembers.optional(),
  accreditationNumber: z.string().optional(),
  affiliation: z.string().optional(),

  // location
  address: AddressSchema.optional(), // Use the AddressSchema defined above
  contact: ContactSchema.optional(), // Using placeholder ContactSchema
  website: z.string().url({ message: "Invalid website URL" }).optional(), // Validate as URL
  socialMedia: z.array(SocialMediaSchema).optional(), // Using placeholder SocialMedialSchema

  // students
  studentCapacity: z.number().int().positive({ message: "Student capacity must be a positive integer" }).optional(), // Ensure positive integer
  uniformRequired: z.boolean().optional(),
  attendanceSystem: AttendanceSystemEnum.optional(),
  scholarshipAvailable: z.boolean().optional(),

  // facilities
  classrooms: z.number().int().positive({ message: "Number of classrooms must be a positive integer" }).optional(),
  library: z.boolean().optional(),
  labs: z.array(z.string()).optional(), // Optional array of lab names/types
  sportsExtracurricular: z.array(z.string()).optional(), // Optional array of activities
  onlineClasses: z.boolean().optional(),

  // meta data (often optional in input/validation schemas)
  createAt: z.date().optional(), // Use z.date() for Date objects
  updatedAt: z.date().optional(), // Use z.date() for Date objects
});

type SchoolData = z.infer<typeof SchoolSchema>;


// Example Data Object conforming to the SchoolSchema
const exampleSchoolData: SchoolData = {
  id: 'clerk123xyz789objectId', // Example ObjectId string
  creatorId: 'user_abc123def456ghi', // Example creator ID string
  username: 'greenhillsacademy',
  logo: 'https://example.com/logos/gha_logo.png',
  name: 'Green Hills Academy',
  code: 'GHA001',
  description: 'A leading international school in Kigali offering IB and Cambridge curricula.',
  schoolType: 'International',
  curriculum: ['IB', 'Cambridge'],
  educationLevel: ['Nursery', 'Primary', 'Secondary'],
  schoolMembers: 'Mixed',
  accreditationNumber: 'CIS-12345',
  affiliation: 'Council of International Schools (CIS)',
  address: {
    country: 'Rwanda',
    province: 'Kigali City',
    district: 'Nyarugenge',
    sector: 'Nyamirambo',
    // village: '...', // Optional
    city: 'Kigali',
    street: 'KG 2 Ave',
    postalCode: '00101', // Example postal code
    googleMapUrl: 'https://maps.google.com/?q=green+hills+academy+kigali',
  },
  contact: {
    phone: "+250 788 123 456",
    email: "info@greenhillsacademy.ac.rw"
  },
  website: 'https://www.greenhillsacademy.ac.rw/',
  socialMedia: [
    { platform: 'Facebook', link: 'https://www.facebook.com/GreenHillsAcademyRwanda/' },
    { platform: 'Twitter', link: 'https://twitter.com/GreenHillsAcad' }
  ],
  studentCapacity: 1500,
  uniformRequired: true,
  attendanceSystem: 'Online',
  scholarshipAvailable: true,
  classrooms: 50,
  library: true,
  labs: ['Science Lab', 'Computer Lab', 'Language Lab'],
  sportsExtracurricular: ['Football', 'Basketball', 'Swimming', 'Debate Club', 'Music'],
  onlineClasses: true,
  // createAt and updatedAt are often omitted here as they are set by the database
  // createAt: new Date('2023-01-15T10:00:00.000Z'), // Example Date object
  // updatedAt: new Date('2025-04-18T14:30:00.000Z'), // Example Date object
};

// You can validate the example data like this:
try {
  SchoolSchema.parse(exampleSchoolData);
  console.log("Example school data is valid!");
} catch (error) {
  if (error instanceof z.ZodError) {
    console.error("Validation failed:", error.errors);
  } else {
    console.error("An unexpected error occurred:", error);
  }
}
