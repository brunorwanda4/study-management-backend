// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
  SCHOOLSTAFF
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

type Age {
  year  Int
  month Int
  day   Int
}

type Address {
  country      String
  province     String?
  district     String?
  sector       String?
  cell         String?
  village      String?
  state        String?
  city         String?
  street       String?
  postalCode   String?
  googleMapUrl String?
}

type Contact {
  phone String
  email String
}

type SocialMedial {
  platform String
  link     String
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  name      String
  username  String    @unique
  password  String?
  role      UserRole?
  image     String?
  phone     String?
  gender    Gender?
  age       Age?
  address   Address?
  bio       String?
  createAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  SchoolStaff SchoolStaff[]
  Class       Class[]
  Teacher     Teacher[]
  Student     Student[]
}

// school module

enum SchoolType {
  Public
  Private
  Charter
  International
}

enum SchoolMembers {
  Mixed
  Boys
  Girls
}

enum AttendanceSystem {
  Manual
  Online
}

model School {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  creatorId             String            @db.ObjectId
  // basic information
  username              String            @unique
  logo                  String?
  name                  String
  code                  String            @unique
  description           String?
  schoolType            SchoolType
  curriculum            String[]
  educationLevel        String[]
  assessmentTypes       String[]
  schoolMembers         SchoolMembers?
  accreditationNumber   String?
  affiliation           String?
  // location
  address               Address?
  contact               Contact?
  website               String?
  socialMedia           SocialMedial[]
  // students
  studentCapacity       Int?
  uniformRequired       Boolean?
  attendanceSystem      AttendanceSystem?
  scholarshipAvailable  Boolean?
  // facilities
  classrooms            Int?
  library               Boolean?
  labs                  String[]
  sportsExtracurricular String[]
  onlineClasses         Boolean?
  // meta data
  createAt              DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  SchoolStaff SchoolStaff[]
  Class       Class[]
  Teacher     Teacher[]

  Student Student[]
}

// school member

enum schoolStaffRole {
  DIRECTOR
  DOSE
}

model SchoolStaff {
  id       String        @id @default(auto()) @map("_id") @db.ObjectId
  userId   String        @db.ObjectId
  schoolId String        @db.ObjectId
  role     SchoolMembers

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// class
enum ClassType {
  SchoolClass
  Private
  Public
}

model Class {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  schoolId       String?    @db.ObjectId
  creatorId      String?    @db.ObjectId
  code           String     @unique
  name           String
  username       String     @unique
  image          String?
  classType      ClassType? @default(Private)
  educationLever String?
  curriculum     String?
  classTeacherId String?    @db.ObjectId

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  school  School?   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user    User?     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  teacher Teacher?  @relation(fields: [classTeacherId], references: [id], onDelete: Cascade)
  Student Student[]

  Module Module[]
}

// school member
model Teacher {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  schoolId String? @db.ObjectId
  userId   String  @db.ObjectId

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  school School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  Class Class[]
}

model Student {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String  @db.ObjectId
  classId  String? @db.ObjectId
  schoolId String? @db.ObjectId

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  class  Class?  @relation(fields: [classId], references: [id])
  school School? @relation(fields: [schoolId], references: [id])
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ModuleType {
  General
  Optional
}

model Module {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  classId       String?     @db.ObjectId
  code          String      @unique
  subjectType   ModuleType?
  curriculum    String?
  copyright     String?
  learningHours Int?

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  class Class? @relation(fields: [classId], references: [id])
}
