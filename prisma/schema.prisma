// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
  SCHOOLSTAFF
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

type Age {
  year  Int
  month Int
  day   Int
}

type Address {
  country      String
  province     String?
  district     String?
  sector       String?
  cell         String?
  village      String?
  state        String?
  city         String?
  street       String?
  postalCode   String?
  googleMapUrl String?
}

type Contact {
  phone String
  email String
}

type SocialMedial {
  platform String
  link     String
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  name            String
  username        String    @unique
  password        String?
  role            UserRole?
  image           String?
  phone           String?
  gender          Gender?
  age             Age?
  address         Address?
  bio             String?
  // other data
  currentSchoolId String?   @db.ObjectId
  createAt        DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  school School? @relation(fields: [currentSchoolId], references: [id])

  SchoolStaff       SchoolStaff[]
  Class             Class[]
  Teacher           Teacher[]
  Student           Student[]
  SchoolJoinRequest SchoolJoinRequest[]
}

// school module

enum SchoolType {
  Public
  Private
  Charter
  International
}

enum SchoolMembers {
  Mixed
  Boys
  Girls
}

enum AttendanceSystem {
  Manual
  Online
}

model School {
  id                               String            @id @default(auto()) @map("_id") @db.ObjectId
  creatorId                        String            @db.ObjectId
  // basic information
  username                         String            @unique
  logo                             String?
  name                             String
  description                      String?
  schoolType                       SchoolType
  curriculum                       String[]
  educationLevel                   String[]
  assessmentTypes                  String[]
  schoolMembers                    SchoolMembers?
  accreditationNumber              String?
  affiliation                      String?
  // location
  address                          Address?
  contact                          Contact?
  website                          String?
  socialMedia                      SocialMedial[]
  // students
  studentCapacity                  Int?
  uniformRequired                  Boolean?
  attendanceSystem                 AttendanceSystem?
  scholarshipAvailable             Boolean?
  // facilities
  classrooms                       Int?
  library                          Boolean?
  labs                             String[]
  sportsExtracurricular            String[]
  onlineClasses                    Boolean?
  // security
  studentsCode                     String?
  teachersCode                     String?
  schoolStaffsCode                 String?
  password                         String?
  requiredVerificationToJoinByCode Boolean           @default(false)

  // meta data
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  SchoolStaff       SchoolStaff[]
  Class             Class[]
  Teacher           Teacher[]
  Student           Student[]
  SchoolJoinRequest SchoolJoinRequest[]
  User              User[]
}

// school member
model SchoolStaff {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  schoolId  String   @db.ObjectId
  role      String
  email     String?
  name      String?
  phone     String?
  image     String?
  gender    Gender?
  age       Age?
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, schoolId])
}

// class
enum ClassType {
  SchoolClass
  Private
  Public
}

model Class {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  schoolId       String?    @db.ObjectId
  creatorId      String?    @db.ObjectId
  code           String     @unique
  name           String
  username       String     @unique
  image          String?
  classType      ClassType? @default(Private)
  educationLever String?
  curriculum     String?
  classTeacherId String?    @db.ObjectId

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  school   School?   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user     User?     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  teacher  Teacher?  @relation(fields: [classTeacherId], references: [id], onDelete: Cascade)
  students Student[]

  Module Module[]

  SchoolJoinRequest SchoolJoinRequest[]
}

// school member
model Teacher {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  schoolId String? @db.ObjectId
  userId   String  @db.ObjectId
  email    String?
  name     String?
  phone    String?
  image    String?
  gender   Gender?
  age      Age?

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  school School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  Class  Class[]
  Module Module[]

  @@unique([userId, schoolId])
}

model Student {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  classId   String?  @db.ObjectId
  schoolId  String?  @db.ObjectId
  email     String?
  name      String?
  phone     String?
  image     String?
  gender    Gender?
  age       Age?
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  class  Class?  @relation(fields: [classId], references: [id])
  school School? @relation(fields: [schoolId], references: [id])
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, schoolId])
}

enum ModuleType {
  General
  Optional
}

model Module {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  classId       String?     @db.ObjectId
  code          String      @unique
  subjectType   ModuleType?
  curriculum    String?
  copyright     String?
  learningHours Int?
  teacherId     String?     @db.ObjectId

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher Teacher? @relation(fields: [teacherId], references: [id])
  class   Class?   @relation(fields: [classId], references: [id])
}

model SchoolJoinRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  schoolId  String   @db.ObjectId
  role      String
  name      String?
  email     String?
  phone     String?
  classId   String?  @db.ObjectId
  fromUser  Boolean  @default(false)
  status    String   @default("pending")
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  school School @relation(fields: [schoolId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])
  class  Class? @relation(fields: [classId], references: [id])

  @@unique([email, schoolId])
  @@map("school_join_requests")
}
